#!/usr/bin/env ruby
# encoding: utf-8
#
# This file is part of Diggit.
#
# Diggit is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Diggit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Diggit.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2015 Jean-RÃ©my Falleri <jr.falleri@gmail.com>

require 'gli'
require_relative '../lib/dgit'

module Diggit
	include GLI::App

	extend self
	program_desc 'A git repository analysis tool.'

	switch [:v, :verbose], default_value: false, negatable: false, desc: "Indicates if the debug information are visible."
	flag [:f, :folder], default_value: ".", desc: "Path to the diggit folder. Default: current folder."

	version Diggit::VERSION

	subcommand_option_handling :normal
	arguments :strict

	desc 'Init a diggit folder.'
	skips_pre
	command :init do |c|
		c.action do |globals, _options, _args|
			Diggit::Dig.init_dir globals[:f]
			Log.ok "Diggit folder initialized."
		end
	end

	desc 'Display the status of the diggit folder.'
	command :status do |c|
		c.action do |_global_options, _options, _args|
			Log.info "Config"
			Log.info "======"
			Log.info "- Analyses: #{Diggit::Dig.it.config.get_analyses.map(&:name).join(', ')}"
			Log.info "- Joins: #{Diggit::Dig.it.config.get_joins.map(&:name).join(', ')}"
			Log.info ""
			Log.info "Journal"
			Log.info "======="
			Log.info "- New sources:"
			Log.indent do
				Log.ok "* Ok: #{Diggit::Dig.it.journal.sources_by_state(:new).size}"
				Log.error "* Error: #{Diggit::Dig.it.journal.sources_by_state(:new, true).size}"
			end
			Log.info "- Cloned sources:"
			Log.indent do
				Log.ok "* Ok: #{Diggit::Dig.it.journal.sources_by_state(:cloned).size}"
				Log.error "* Error: #{Diggit::Dig.it.journal.sources_by_state(:cloned, true).size}"
			end
			Log.info "- Performed joins:" unless Diggit::Dig.it.journal.workspace.performed.empty?
			Diggit::Dig.it.journal.workspace.performed.each do |e|
				Log.indent { Log.info "#{e.name}, time: #{e.duration}" }
			end
			Log.info "- Canceled joins:" unless Diggit::Dig.it.journal.workspace.canceled.empty?
			Diggit::Dig.it.journal.workspace.canceled.each do |e|
				Log.indent do
					Log.info "#{e.name}, time: #{e.duration}"
					Log.indent do
						Log.error e.error.message
						Log.error e.error.backtrace.join("\n")
					end
				end
			end
		end
	end

	desc 'Manage the sources of the diggit folder.'
	command :sources do |c|
		c.desc 'List the sources.'
		c.command :list do |list|
			list.action do |_global_options, _options, _args|
				sources = Diggit::Dig.it.journal.sources
				sources.each_index do |idx|
					msg = "#{idx}	#{sources[idx].url} (#{sources[idx].entry.state})"
					sources[idx].entry.error? ? Log.error(msg) : Log.ok(msg)
				end
			end
		end
		c.desc 'Add a source.'
		c.arg_name 'url'
		c.command :add do |add|
			add.action do |_global_options, _options, args|
				Diggit::Dig.it.journal.add_source args[0]
			end
		end
		c.desc 'Import sources from a file.'
		c.arg_name 'file'
		c.command :import do |import|
			import.action do |_global_options, _options, args|
				File.open(args[0]).each { |line| Diggit::Dig.it.journal.add_source(line.strip) }
			end
		end
		c.desc 'Display all sources in error.'
		c.command :errors do |errors|
			errors.action do |_global_options, _options, _args|
				sources = Diggit::Dig.it.journal.sources
				sources.each_index do |idx|
					msg = "#{idx}	#{sources[idx].url} (#{sources[idx].entry.state})"
					Log.error msg if sources[idx].entry.error?
				end
			end
		end
		c.desc 'Display information on a source'
		c.arg_name 'id'
		c.command :info do |info|
			info.action do |_global_options, _options, args|
				src = Diggit::Dig.it.journal.sources_by_ids(args[0].to_i)[0]
				Log.info "URL: #{src.url}"
				Log.info "State: #{src.entry.state}"
				Log.info "Performed analyses:" unless src.entry.performed.empty?
				src.entry.performed.each do |e|
					Log.indent { Log.info "#{e.name}, time: #{e.duration}" }
				end
				Log.info "Canceled analyses:" unless src.entry.canceled.empty?
				src.entry.canceled.each do |e|
					Log.indent do
						Log.info "#{e.name}, time: #{e.duration}"
						Log.indent do
							Log.error e.error.message
							Log.error e.error.backtrace.join("\n")
						end
					end
				end
			end
		end
		c.default_command :list
	end

	desc 'Manage the joins of the diggit folder.'
	command :joins do |c|
		c.desc 'List the joins'
		c.command :list do |list|
			list.action do |_global_options, _options, _args|
				Diggit::Dig.it.config.get_joins.each { |a| Log.info a.name }
			end
		end
		c.desc 'Add a join.'
		c.arg_name 'name'
		c.command :add do |add|
			add.action do |_global_options, _options, args|
				Diggit::Dig.it.config.add_join args[0]
			end
		end
		c.desc 'Delete a join.'
		c.arg_name 'name'
		c.command :del do |del|
			del.action do |_global_options, _options, args|
				Diggit::Dig.it.config.del_join args[0]
			end
		end
		c.desc 'Perform joins.'
		c.command :perform do |perform|
			perform.flag [:s, :sources], desc: "list of sources", type: Array, default_value: []
			perform.flag [:a, :analyses], desc: "list of analyses", type: Array, default_value: []
			perform.flag [:m, :mode], desc: "running mode",
			must_match: { "run" => :run, "clean" => :clean, "rerun" => :rerun }, default_value: :run
			perform.action do |_global_options, options, _args|
				Diggit::Dig.it.join(options[:s], options[:a], options[:m])
			end
		end
		c.default_command :list
	end

	desc 'Manage the analyses of the diggit folder.'
	command :analyses do |c|
		c.desc 'List the analyses'
		c.command :list do |list|
			list.action do |_global_options, _options, _args|
				Diggit::Dig.it.config.get_analyses.each { |a| Log.info a.name }
			end
		end
		c.desc 'Add an analysis.'
		c.arg_name 'name'
		c.command :add do |add|
			add.action do |_global_options, _options, args|
				Diggit::Dig.it.config.add_analysis args[0]
			end
		end
		c.desc 'Delete an analysis.'
		c.arg_name 'name'
		c.command :del do |del|
			del.action do |_global_options, _options, args|
				Diggit::Dig.it.config.del_analysis args[0]
			end
		end
		c.desc 'Perform analyses.'
		c.command :perform do |perform|
			perform.flag [:s, :sources], desc: "list of sources", type: Array, default_value: []
			perform.flag [:a, :analyses], desc: "list of analyses", type: Array, default_value: []
			perform.flag [:m, :mode], desc: "running mode",
			must_match: { "run" => :run, "clean" => :clean, "rerun" => :rerun }, default_value: :run
			perform.action do |_global_options, options, _args|
				Diggit::Dig.it.analyze(options[:s], options[:a], options[:m])
			end
		end
		c.default_command :list
	end

	desc 'Manage clone actions.'
	command :clones do |c|
		c.desc 'Perform the clones.'
		c.command :perform do |perform|
			perform.flag [:s, :sources], desc: "list of sources", type: Array, default_value: []
			perform.action do |_global_options, options, _args|
				Diggit::Dig.it.clone(*options[:s])
			end
		end
		c.default_command :perform
	end
	pre do |globals, _command, _options, _args|
		Diggit::Dig.init globals[:f]
		Log.level = :fine if globals[:v]
		true
	end

	post do |_global, _command, _options, _args|
			# Post logic here, skips_post to skip commands
	end

	on_error do |exception|
		Log.error "Error running diggit."
		Log.error exception.message
		Log.info exception.backtrace.join("\n")
		false
	end

	exit run(ARGV)
end
